{"ast":null,"code":"var _jsxFileName = \"/Users/axelhammarback/Technigo/W21 \\u2013\\xA0Final Project (Bookie)/project-bookie/client/src/components/WantToRead.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BookCardWantToRead } from './BookCardWantToRead';\nexport const WantToRead = () => {\n  const BOOKS_URL = 'http://localhost:8080/books/wantToRead';\n  const [books, setBooks] = useState([]);\n  useEffect(() => {\n    fetchBooks();\n  }, []);\n\n  const setReadStatusToTrue = _id => {\n    fetch(`http://localhost:8080/books/${_id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: 'false'\n    });\n  };\n\n  const deleteBook = _id => {\n    fetch(`http://localhost:8080/books/${_id}`, {\n      method: 'DELETE' // headers: { 'Content-Type': 'application/json' },\n\n    }).then(res => res.json().then(json => {\n      console.log(\"Book deleted successfully\");\n      fetchBooks();\n      return json;\n    }));\n  };\n\n  const onMarkAsRead = _id => {};\n\n  const fetchBooks = () => {\n    // do a fetch to the local database\n    fetch(BOOKS_URL).then(res => {\n      // convert the resonse into json format\n      console.log(res);\n      return res.json();\n    }).then(data => {\n      // NEED TO FILTER ON BOOKS WITH THE ISREAD=FALSE FLAG HERE\n      const filteredBooks = data.filter(book => book.title);\n      setBooks(filteredBooks);\n      console.log(\"filteredBooks\");\n      console.log(filteredBooks);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"debug grow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, books.map(book => /*#__PURE__*/React.createElement(BookCardWantToRead, {\n    _id: book._id,\n    author: book.author,\n    title: book.title,\n    googleId: book.googleId,\n    isRead: book.isRead,\n    thumbnail: book.thumbnail,\n    key: book._id,\n    onDeleteBook: deleteBook,\n    onMarkAsRead: setReadStatusToTrue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))));\n}; // author: \"Hanna Johansson\"\n// dateRead: null\n// googleId: \"q2jvDwAAQBAJ\"\n// isRead: false\n// thumbnail: \"http://books.google.com/books/content?id=q2jvDwAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api\"\n// title: \"Antiken\"\n// __v: 0\n// _id: \"600c8a52da9eefdad186ace8\"","map":{"version":3,"sources":["/Users/axelhammarback/Technigo/W21 – Final Project (Bookie)/project-bookie/client/src/components/WantToRead.js"],"names":["React","useEffect","useState","BookCardWantToRead","WantToRead","BOOKS_URL","books","setBooks","fetchBooks","setReadStatusToTrue","_id","fetch","method","headers","body","deleteBook","then","res","json","console","log","onMarkAsRead","data","filteredBooks","filter","book","title","map","author","googleId","isRead","thumbnail"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAMC,SAAS,GAAG,wCAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,mBAAmB,GAAIC,GAAD,IAAS;AACnCC,IAAAA,KAAK,CAAE,+BAA8BD,GAAI,EAApC,EAAuC;AAC1CE,MAAAA,MAAM,EAAE,OADkC;AAE1CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFiC;AAG1CC,MAAAA,IAAI,EAAE;AAHoC,KAAvC,CAAL;AAKH,GANC;;AAQF,QAAMC,UAAU,GAAIL,GAAD,IAAS;AAC1BC,IAAAA,KAAK,CAAE,+BAA8BD,GAAI,EAApC,EAAuC;AAC1CE,MAAAA,MAAM,EAAE,QADkC,CAE1C;;AAF0C,KAAvC,CAAL,CAIGI,IAJH,CAIQC,GAAG,IACPA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBE,IAAI,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAZ,MAAAA,UAAU;AACV,aAAOU,IAAP;AACD,KAJD,CALJ;AAWD,GAZD;;AAcA,QAAMG,YAAY,GAAIX,GAAD,IAAS,CAE7B,CAFD;;AAIA,QAAMF,UAAU,GAAG,MAAM;AACvB;AACAG,IAAAA,KAAK,CAACN,SAAD,CAAL,CACGW,IADH,CACSC,GAAD,IAAS;AACb;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KALH,EAMGF,IANH,CAMSM,IAAD,IAAU;AACd;AACA,YAAMC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,KAAzB,CAAtB;AACAnB,MAAAA,QAAQ,CAACgB,aAAD,CAAR;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ;AACD,KAZH;AAaD,GAfD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIjB,KAAK,CAACqB,GAAN,CAAUF,IAAI,iBACZ,oBAAC,kBAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACf,GADZ;AAEE,IAAA,MAAM,EAAEe,IAAI,CAACG,MAFf;AAGE,IAAA,KAAK,EAAEH,IAAI,CAACC,KAHd;AAIE,IAAA,QAAQ,EAAED,IAAI,CAACI,QAJjB;AAKE,IAAA,MAAM,EAAEJ,IAAI,CAACK,MALf;AAME,IAAA,SAAS,EAAEL,IAAI,CAACM,SANlB;AAOE,IAAA,GAAG,EAAEN,IAAI,CAACf,GAPZ;AAQE,IAAA,YAAY,EAAEK,UARhB;AASE,IAAA,YAAY,EAAEN,mBAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF,CADF;AAqBC,CAxEM,C,CA0EP;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { BookCardWantToRead } from './BookCardWantToRead'\n\nexport const WantToRead = () => {\n  const BOOKS_URL = 'http://localhost:8080/books/wantToRead'\n  const [books, setBooks] = useState([])\n\n  useEffect(() => {\n    fetchBooks()\n  }, [])\n\n  const setReadStatusToTrue = (_id) => {\n    fetch(`http://localhost:8080/books/${_id}`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: 'false'\n    })\n}\n\nconst deleteBook = (_id) => {\n  fetch(`http://localhost:8080/books/${_id}`, {\n    method: 'DELETE'\n    // headers: { 'Content-Type': 'application/json' },\n  })\n    .then(res =>\n      res.json().then(json => {\n        console.log(\"Book deleted successfully\")\n        fetchBooks()\n        return json;\n      })\n    );\n}\n\nconst onMarkAsRead = (_id) => {\n\n}\n\nconst fetchBooks = () => {\n  // do a fetch to the local database\n  fetch(BOOKS_URL)\n    .then((res) => {\n      // convert the resonse into json format\n      console.log(res)\n      return res.json()\n    })\n    .then((data) => {\n      // NEED TO FILTER ON BOOKS WITH THE ISREAD=FALSE FLAG HERE\n      const filteredBooks = data.filter(book => book.title)\n      setBooks(filteredBooks)\n      console.log(\"filteredBooks\")\n      console.log(filteredBooks)\n    })\n}\n\nreturn (\n  <div className=\"debug grow\">\n    <section className=\"card-list\">\n      {\n        books.map(book => (\n          <BookCardWantToRead\n            _id={book._id}\n            author={book.author}\n            title={book.title}\n            googleId={book.googleId}\n            isRead={book.isRead}\n            thumbnail={book.thumbnail}\n            key={book._id}\n            onDeleteBook={deleteBook}\n            onMarkAsRead={setReadStatusToTrue}\n          />\n        ))\n      }\n    </section>\n  </div>\n)\n}\n\n// author: \"Hanna Johansson\"\n// dateRead: null\n// googleId: \"q2jvDwAAQBAJ\"\n// isRead: false\n// thumbnail: \"http://books.google.com/books/content?id=q2jvDwAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api\"\n// title: \"Antiken\"\n// __v: 0\n// _id: \"600c8a52da9eefdad186ace8\""]},"metadata":{},"sourceType":"module"}