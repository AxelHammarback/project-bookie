{"ast":null,"code":"var _jsxFileName = \"/Users/axelhammarback/Technigo/W21 \\u2013\\xA0Final Project (Bookie)/project-bookie/client/src/components/Search.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BookCardSearch } from './BookCardSearch';\nexport const Search = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const BOOKS_POST_URL = 'http://localhost:8080/books'; // Function that handles the search.\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=\"${searchQuery}\"`).then(response => response.json()).then(books => {\n      setSearchResults(books.items);\n      setSearchQuery('');\n    }).catch(() => {\n      console.error();\n      setSearchResults('');\n    });\n  };\n\n  const addBook = title => {\n    // Fetches the messages URL, and does a post request containing the message part of the message (this is handled in the onPostMessage function which is being sent in with the MessageInput component).\n    fetch(BOOKS_POST_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message\n      })\n    }).then(() => {\n      // When the message is done being posted, fetch the messages again, so the new post is visible.\n      fetchMessages();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"debug grow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search for a book or an author\",\n    value: searchQuery,\n    onChange: e => setSearchQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Search\")), searchResults.map(book =>\n  /*#__PURE__*/\n  // console.log(typeof book.volumeInfo.imageLinks.thumbnail),\n  React.createElement(BookCardSearch // Since some entries had \"undefined\" as author, we need to check whether the author(s) exist or not.\n  , {\n    author: Array.isArray(book.volumeInfo.authors) ? book.volumeInfo.authors[0] : 'Unknown author',\n    title: book.volumeInfo.title,\n    thumbnail: typeof book.volumeInfo.imageLinks !== \"undefined\" ? book.volumeInfo.imageLinks.thumbnail : \"Has no image\",\n    key: book.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }) // <p>{book.volumeInfo.title}</p>\n  ));\n};","map":{"version":3,"sources":["/Users/axelhammarback/Technigo/W21 – Final Project (Bookie)/project-bookie/client/src/components/Search.js"],"names":["React","useEffect","useState","BookCardSearch","Search","searchResults","setSearchResults","searchQuery","setSearchQuery","BOOKS_POST_URL","handleSubmit","e","preventDefault","fetch","then","response","json","books","items","catch","console","error","addBook","title","method","headers","body","JSON","stringify","message","fetchMessages","target","value","map","book","Array","isArray","volumeInfo","authors","imageLinks","thumbnail","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAC1B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMO,cAAc,GAAG,6BAAvB,CAJ0B,CAM1B;;AACA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AAEAC,IAAAA,KAAK,CAAE,kDAAiDN,WAAY,GAA/D,CAAL,CACGO,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,KAAD,IAAW;AACfX,MAAAA,gBAAgB,CAACW,KAAK,CAACC,KAAP,CAAhB;AACAV,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KALH,EAMGW,KANH,CAMS,MAAM;AACXC,MAAAA,OAAO,CAACC,KAAR;AACAf,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,KATH;AAUD,GAbD;;AAeA,QAAMgB,OAAO,GAAIC,KAAD,IAAW;AAEzB;AACAV,IAAAA,KAAK,CAACJ,cAAD,EAAiB;AACpBe,MAAAA,MAAM,EAAE,MADY;AAEpBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFW;AAGpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,OAAO,EAAEA;AAAX,OAAf;AAHc,KAAjB,CAAL,CAKGf,IALH,CAKQ,MAAM;AACV;AACAgB,MAAAA,aAAa;AACd,KARH;AASD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,IAAA,QAAQ,EAAEpB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,gCAFd;AAGE,IAAA,KAAK,EAAEH,WAHT;AAIE,IAAA,QAAQ,EAAEI,CAAC,IAAIH,cAAc,CAACG,CAAC,CAACoB,MAAF,CAASC,KAAV,CAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,CAFF,EAYI3B,aAAa,CAAC4B,GAAd,CAAkBC,IAAI;AAAA;AACpB;AACA,sBAAC,cAAD,CACE;AADF;AAEE,IAAA,MAAM,EACJC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,UAAL,CAAgBC,OAA9B,IACIJ,IAAI,CAACG,UAAL,CAAgBC,OAAhB,CAAwB,CAAxB,CADJ,GAEI,gBALR;AAOE,IAAA,KAAK,EAAEJ,IAAI,CAACG,UAAL,CAAgBd,KAPzB;AAQE,IAAA,SAAS,EACP,OAAOW,IAAI,CAACG,UAAL,CAAgBE,UAAvB,KAAsC,WAAtC,GACIL,IAAI,CAACG,UAAL,CAAgBE,UAAhB,CAA2BC,SAD/B,GAEI,cAXR;AAaE,IAAA,GAAG,EAAEN,IAAI,CAACO,EAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFoB,CAiBpB;AAjBF,GAZJ,CADF;AAmCD,CAvEM","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { BookCardSearch } from './BookCardSearch'\n\nexport const Search = () => {\n  const [searchResults, setSearchResults] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const BOOKS_POST_URL = 'http://localhost:8080/books'\n\n  // Function that handles the search.\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=\"${searchQuery}\"`)\n      .then((response) => response.json())\n      .then((books) => {\n        setSearchResults(books.items);\n        setSearchQuery('');\n      })\n      .catch(() => {\n        console.error();\n        setSearchResults('');\n      })\n  }\n\n  const addBook = (title) => {\n    \n    // Fetches the messages URL, and does a post request containing the message part of the message (this is handled in the onPostMessage function which is being sent in with the MessageInput component).\n    fetch(BOOKS_POST_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message: message })\n    })\n      .then(() => {\n        // When the message is done being posted, fetch the messages again, so the new post is visible.\n        fetchMessages()\n      })\n  }\n\n  return (\n    <div className=\"debug grow\">\n      <p>Search</p>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search for a book or an author\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n      {\n        searchResults.map(book => (\n          // console.log(typeof book.volumeInfo.imageLinks.thumbnail),\n          <BookCardSearch\n            // Since some entries had \"undefined\" as author, we need to check whether the author(s) exist or not.\n            author={\n              Array.isArray(book.volumeInfo.authors) \n                ? book.volumeInfo.authors[0]\n                : 'Unknown author'\n            }\n            title={book.volumeInfo.title}\n            thumbnail={\n              typeof book.volumeInfo.imageLinks !== \"undefined\"\n                ? book.volumeInfo.imageLinks.thumbnail\n                : \"Has no image\"\n            }\n            key={book.id}\n          />\n          // <p>{book.volumeInfo.title}</p>\n        ))\n      }\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}